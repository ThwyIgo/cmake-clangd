;;; cmake-clangd.el --- Setup clangd settings for cmake projects  -*- lexical-binding: t; -*-

;; Copyright (C) 2024 Thiago Pacheco Rocha

;; Author: Thiago Pacheco Rocha <thiagopachecorocha@hotmail.com>
;; Created: 06 Jan 2024
;; Version: 0.0.1

;; Keywords: tools
;; URL: https://example.com

;; Package-Requires: (eglot)

;; This file is not part of GNU Emacs.

;;; Commentary:
;; Package that uses CMake's file API to correctly configure clangd LSP server.
;; It also adds functions to easily compile and run a CMake project.

;;; Code:

(require 'json)
(require 'eglot)

(defgroup cmake-clangd nil
  "Configure clangd to work with CMake."
  :prefix "cmake-clangd-"
  :group 'applications)

(defconst cmake-clangd-output-buffer "*cmake-clangd-output*"
  "The name of the buffer where output will be outputted.
It should be a read-only buffer.")

(defcustom cmake-clangd-build-dir "out/"
  "Directory where build files will be.
This is the directory used with \"-B\" cmake flag when configuring the project."
  :type 'directory
  :group 'cmake-clangd)

;;;;###autoload
(defun cmake-clangd-setup ()
  "Configures clangd to use compile_commands.json generated by CMake."
  (interactive)

  (let* ((eglot-project-root (expand-file-name (project-root (eglot--current-project))))
         (cmake-project-root (if (file-exists-p (concat eglot-project-root "CMakeLists.txt"))
                                 eglot-project-root
                               (unless (null buffer-file-name)
                                 (cmake-clangd-find-file-up-dir "CMakeLists.txt" (file-name-parent-directory buffer-file-name))))))

    (if (null cmake-project-root)
        (error "CMakeLists.txt not found")
      (cmake-clangd-log "Found an initial CMakeLists.txt in " cmake-project-root))
    (cmake-clangd-log "Eglot project: " eglot-project-root)

    ;; Find top-level CMakeLists.txt with CMake file API
    (unless (file-exists-p (concat cmake-project-root "CMakePresets.json"))
      (let ((inhibit-read-only t))
        (call-process "cmake" nil cmake-clangd-output-buffer nil
                      "-S" cmake-project-root
                      "-B" (concat eglot-project-root cmake-clangd-build-dir)
                      "-DCMAKE_BUILD_TYPE=Debug"))
      )
    )
  )

(defun cmake-clangd-find-file-up-dir (filename directory)
  "Starting from `directory', tries to find `filename' file; if not found, goes
up 1 level in the directory hierarchy and repeat.
Returns the directory where `filename' is located, or nil if it is not found."
  (let ((cmake-project-root directory))
    ;; Go up 1 directory until a CMakeLists.txt is found.
    (while (and (not (null cmake-project-root))
                (not (file-readable-p (concat cmake-project-root filename))))
      (setq cmake-project-root (file-name-parent-directory cmake-project-root)))

    cmake-project-root
    )
  )

(defun cmake-clangd-log (&rest strings)
  "Append `strings' to `cmake-clangd-output-buffer'."
  (with-current-buffer (get-buffer-create cmake-clangd-output-buffer)
    (read-only-mode t)
    (end-of-buffer)
    (let ((inhibit-read-only t))
      (apply 'insert strings)
      (insert "\n"))
    )
  )

;;; cmake-clangd.el ends here
